# This is a basic workflow to help you get started with Actions

name: CI ðŸ”¨

# Controls when the workflow will run
on:
  push:
    branches:
      - "*"
  pull_request:
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout all branches
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0  # fetch all branches

      - name: build master doc (fake it by appending a word)
        run: |
          git show origin/gh-pages:yo.md > doc/yo.md
          echo "yo" >> doc/yo.md

      - name: Deploy documentation in root folder on GH pages ðŸš€
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: doc # The folder the action should deploy.
          target-folder: / # The folder the action should deploy to.
          commit-message: publish documentation for master
          clean-exclude: |
            "version/*"

      - name: Checkout all branches
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0  # fetch all branches

      - name: Squash last master doc commits on gh_pages
        run: |
          git checkout gh-pages
          # check if two last commits are for same doc
          last_commit_title=$(git log HEAD -1 --format=%s)
          second_to_last_commit_title=$(git log HEAD~1 -1 --format=%s)
          echo $last_commit_title 
          echo $second_to_last_commit_title
          if [[ $last_commit_title == $second_to_last_commit_title ]]; then
            echo "Merge two last commits"
            git reset --soft HEAD~
            git config user.name "Actions"
            git config user.email "actions@github.com"
            git commit --amend --no-edit
            git push -f origin gh-pages
          fi


      - name: Tests
        run: |
          echo $GITHUB_REF
          echo ${{ github.ref }}
          echo ${{ github.ref_name }}
          echo ${{ github.head_ref }}
          echo ${{ github.base_ref }}
          echo ${{ github.repository }}
          echo $GITHUB_REPOSITORY

      - name: Set env variables for github+binder links in doc
        run: |
          # binder environment repo and branch
          AUTODOC_BINDER_ENV_GH_REPO_NAME="airbus/scikit-decide"
          AUTODOC_BINDER_ENV_GH_BRANCH="binder"
          # notebooks source repo and branch depending if it is a commit push or a PR
          if [[ $GITHUB_REF == refs/pull* ]];
          then
              AUTODOC_NOTEBOOKS_REPO_URL="${GITHUB_SERVER_URL}/${{ github.event.pull_request.head.repo.full_name }}"
              AUTODOC_NOTEBOOKS_BRANCH=${GITHUB_HEAD_REF}
          elif [[ $GITHUB_REF == refs/heads* ]];
          then
              AUTODOC_NOTEBOOKS_REPO_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}
              AUTODOC_NOTEBOOKS_BRANCH=${GITHUB_REF/refs\/heads\//}
          fi
          # export in GITHUB_ENV for next steps
          echo "AUTODOC_BINDER_ENV_GH_REPO_NAME=${AUTODOC_BINDER_ENV_GH_REPO_NAME}" >> $GITHUB_ENV
          echo "AUTODOC_BINDER_ENV_GH_BRANCH=${AUTODOC_BINDER_ENV_GH_BRANCH}" >> $GITHUB_ENV
          echo "AUTODOC_NOTEBOOKS_REPO_URL=${AUTODOC_NOTEBOOKS_REPO_URL}" >> $GITHUB_ENV
          echo "AUTODOC_NOTEBOOKS_BRANCH=${AUTODOC_NOTEBOOKS_BRANCH}" >> $GITHUB_ENV
          #Â check computed variables
          echo "Binder env: ${AUTODOC_BINDER_ENV_GH_REPO_NAME}/${AUTODOC_BINDER_ENV_GH_BRANCH}"
          echo "Notebooks source: ${AUTODOC_NOTEBOOKS_REPO_URL}/tree/${AUTODOC_NOTEBOOKS_BRANCH}"

      - name: read binder env
        run: |
          echo ${AUTODOC_BINDER_ENV_GH_REPO_NAME}
          echo ${AUTODOC_BINDER_ENV_GH_BRANCH}
          echo ${AUTODOC_NOTEBOOKS_REPO_URL}
          echo ${AUTODOC_NOTEBOOKS_BRANCH}

          echo nb_branch: ${{ env.AUTODOC_NOTEBOOKS_BRANCH }}

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo  ${{ github.ref }}

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: deploy
        if: ${{ github.ref == 'refs/heads/main' }}
        run: echo deploy
